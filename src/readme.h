#ifndef _FIRST_READING_
#define _FIRST_READING_

/* Header

こんにちは、"FLE@M"初期バージョン開発者の高瀬です。

このテキストを見ているということは、あなたもプログラミングを志しているのか、
はたまた興味対象として覗いてみたのか。

どちらなのかはわかりませんが、開発秘話や開発支援情報をここに記しておきます。
著作権情報は付加してありますが、ソースの改変は自由としますので色々とやってみて下さい。

どうか"FLE@M"をあなたの手で、さらに使いやすい物にしてあげて下さい。


//==========================================================
// 開発秘話
//==========================================================

今でこそ"FLE@M"はGUIを備えたアプリケーションですが、開発当初はCUIベースのお粗末なものでした。
また、データベースを使うなんて考えもなく、商品ひとつにつき1テキストというデータ管理でした。

しかし、売り上げの集計や文字の入力制限、といった機能の実装にあたり限界を感じたので、
インターフェイスは"Win32 API"、データ管理には小規模データベース"SQLITE3"を用いる事となりました。


これで開発は順調に進むと思ったのですが、2つの壁にぶち当たりました。

1つ目は文字コードの問題。Win32 APIを使うにあたり、Shift-JISを使うかUNICODEを使うかで
ソースがまったく別物になるという事実に直面しました。どっちにも対応させれば良いとか考えたがために、
いろいろと小手先の技を使うはめになりました。(tsqlite3.hはその象徴です。)

2つ目は情報量の問題。Microsoft社の製品Visual C++の出来がいいためか、Windowsプログラミングの情報は
軒並みそれ関連でした。もちろんExpress版を使うという選択肢もあったのですが、
C++についての知識があまりないこと、またVisual C++はソースにゴミデータがついてしまうという事もあり、
あえて茨の道を貫く方針となりました。


また、FLE@Mという名前は"Function of Labor-saving Equipment at Marketing"の略称となっています。
要約すると「商品売買における簡易的機構」というニュアンスです。

けっして"Flea Market"を省略して'A'を'@'にして、あとはノリで英文を作ればいいや、
という安易な考えではありません。断じてありません。


加え、アイコンも初期バージョンは'$'マークを蛇にアレンジした現行の物ではなく、
'@'マークをスクエア状にデフォルメした物でした。

しかし明らかにグッドデザイン賞のマークにしか見えなかったため、あえなくボツとなりました。


紆余曲折あって完成したこのアプリケーションですが、便利に活用していただければ幸いです。


//==========================================================
// 開発支援情報
//==========================================================

○ 開発環境

  OS       : Windows XP Service Pack 3
  Compiler : Borland C/C++ Compiler ver 5.51
  Editor   : TeraPad
  Resource : BCC Form (雛形のみ作成)


○ "Makefile.mak"と"Makefile.bat"について

  小規模なプログラムの場合だと、コマンドプロンプトでのコンパイルも苦には
  なりませんが、肥大化してソースを分割しなければいけない時、コンパイル作業は
  とても大変なものとなってきます。

  そこでプログラマの負担を軽減するための機能が"Make"です。

  "Makefile.mak"にはソースの依存関係とコンパイルオプションを記しておきます。
  この状態でコマンドプロンプトから"Make"と入力すると、
  ソースのタイムスタンプを見て、自動でコンパイルの必要性を判断してくれます。

  "Makefile.bat"はコンパイルとリソースのリンクを自動処理するために作成しました。
  これをダブルクリックすると、自動でアプリケーションを構築するようになっています。

  さらに、"Makefile.bat"の1行目の"rem "という部分を削ると、
  高専内のPCでのコンパイルを可能とします。

  いろいろと書き換えてみて、快適なプログラミングを実現してみてください。


○ コンパイルエラーとリンクエラーについて

  いかなるプログラムでも付き纏うのがエラーの存在。どんなに慎重にプログラミング
  しても、1つくらいはエラーは出るものかと思います。

  一般的なエラーはほとんどコンパイルエラーとして露見します。
  どちらかというと分かりやすいものが多く、修復も容易である場合が多いです。

  対して、厄介なのがリンクエラーです。
  発生理由は"宣言があるのに実態がない変数や関数が存在する。"という単純なものですが、
  一見すると実態があるのにこのエラーが出てしまう場合が多々あります。

  そういった場合はスコープ(有効範囲)やマクロを修正すると直る場合が多いので、
  あきらめず対処してみてください。


○ 文字、文字列について

  ソースコードにでてくる謎の型、"TCHAR"、"LPTSTR"、"LPCTSTR"の3つ。

  これらは何なのかというと、コンパイルオプションで"-WU"(UNICODEオプション)を
  選択するかによって、TCHARは"char"と"wchar_t"を、LPTSTRは"char*"と"wchar_t*"を、
  LPCTSTRは"const char*"と"const wchar_t*"を自動で切り替えてくれるマクロです。

  これらを使うことによって、1つのソースで2つの文字コードに対応したアプリケーションを
  作成することができる訳です。(一般的にはジェネリックマクロと呼ばれます。)

  これらの型に対応した関数のマクロは、"tchar.h"にすべて盛り込まれています。
  詳しくはMicrosoftのホームページなどをご覧ください。


○ "sqlite3_bind_*"関数、"sqlite3_column_*"関数について

  小規模データベース"SQLITE3"は、小規模とは思えないほど強力なAPIです。

  これをC言語でラッピングしたものが"sqlite3.h"+"sqlite3.dll"な訳ですが、
  中でも使い勝手がいいのが上記の2関数です。

  任意の型の値を読み書きできることから、"storectrl.cpp"でもかなりの頻度で
  使われていることが見て取れると思います。

  使い方も似ているのですが、一つ注意しなければならないのが、
  "sqlite3_bind_*"関数は要素指定が"1"始まりなのに対して、
  "sqlite3_column_*"関数は要素指定が"0"始まりな点です。

  バッファオーバーラン防止のためにも厳重なチェックをおすすめします。


○ "sqlite3_exec"関数の正体について

  簡単なSQLの実行であれば便利なこの関数。実はこれ自身は関数呼び出ししか
  しておらず、その実態は"sqlite3_prepare"、"sqlite3_step"関数となります。

  また、なぜかこの関数だけUNICODE対応版が用意されていませんが、
  内部で使用している関数には全てUNICODE対応版が用意されているので、
  自分で作ることができます。(関数名の末尾に16とつくものが対応版です。)

  詳しくは"sqlite3_exec16"等で検索してみてください。


○ "SQLITE3.exe"について

  このプログラムは、SQLite3によって作成されたデータベースを
  操作するためのコンソールアプリケーションです。

  期待したデータベースが作成されているかの確認や、
  SQL文の動作チェックのために使用しました。

  かなりカッチリとした作りになっているので、パスの通った
  フォルダに入れて使用しても良いでしょう。(僕が作った物ではないです。)

  是非有効に活用してみてください。


○ 参考サイト

  ・WisdomSoft (Win32 APIの解説)
  http://wisdom.sakura.ne.jp/

  ・Third impact (SQLITE3の仕様の翻訳文献)
  http://www.3rd-impact.net/Document/SQLite/Translation/

  ・DBOnline (SQL構文の解説)
  http://www.dbonline.jp/


○ 最後に

  "FLE@M"には、自分が作りたいと思っていた機能はすべて実装できたので、
  その点については満足しています。

  しかし、改善しなければならないと思う点が2つあります。

  1つはセキュリティの面。いくつかの文字列操作関数には、
  バッファオーバーランの対策版が用意されています。

  今回は面倒だったため使用しなかったのですが、なるべく対策版を
  使ったほうが良いでしょう。

  もう1つは拡張性の面。今回C言語でこのアプリケーションを作成しましたが、
  C++であればもっと簡潔かつ高機能に実装できると考えています。

  このテキストを読んでいるあなたがその作業を引き継いでくれると、
  とてもありがたいです。気が向いたならばお願いいたします。

Footer */

#endif